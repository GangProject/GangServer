buildscript {
	ext {
		springBootVersion = '1.4.6.BUILD-SNAPSHOT'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
apply plugin: 'war'

jar {
	baseName = 'gang'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

configurations {
	providedRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	//compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.projectlombok:lombok:1.16.4")
	runtime('mysql:mysql-connector-java')

	// swagger
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'

	// mockito
	testCompile "org.mockito:mockito-all:1.10.19"
	testCompile "org.hamcrest:hamcrest-all:1.3"
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	//junit
	compile group: 'junit', name: 'junit', version: '4.12'

	compile('org.springframework.boot:spring-boot-starter-freemarker')

	//devtools
	compile("org.springframework.boot:spring-boot-devtools")

    def querydslVersion = "4.1.4"
    /**
     * querydsl dependency
     */
    compile ("com.querydsl:querydsl-core:$querydslVersion")
    compile ("com.querydsl:querydsl-apt:$querydslVersion")
    compile ("com.querydsl:querydsl-jpa:$querydslVersion")
}
def queryDslOutput = file("src/main/generated/java")

sourceSets {
	main {
		java {
			srcDir "src/main/generated/java"
		}
	}
}
task generateQueryDSL(type: JavaCompile, group: 'build') {
	doFirst {
		if (!queryDslOutput.exists()) {
			logger.info("Creating `$queryDslOutput` directory")

			if (!queryDslOutput.mkdirs()) {
				throw new InvalidUserDataException("Unable to create `$queryDslOutput` directory")
			}
		}
	}

	source = sourceSets.main.java
	classpath = configurations.compile
	options.compilerArgs = [
			"-proc:only",
			"-processor",
			"com.querydsl.apt.jpa.JPAAnnotationProcessor"
	]
	destinationDir = queryDslOutput
}

compileTestJava.dependsOn(generateQueryDSL)

springBoot {
	mainClass = "net.woniper.querydsl.SpringBootQuerydslApplication"
}
clean{
	delete queryDslOutput
}